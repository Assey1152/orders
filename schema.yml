openapi: 3.0.3
info:
  title: Orders API
  version: 1.0.0
  description: Orders API for products
paths:
  /api/v1/basket:
    get:
      operationId: api_v1_basket_list
      description: Возвращает текущее состояние корзины пользователя (только один
        заказ со статусом 'basket'). Включает информацию о товарах, категориях и общей
        стоимости.
      summary: Получить содержимое корзины
      tags:
      - Корзина
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          description: ''
    post:
      operationId: api_v1_basket_create
      description: Добавляет один или несколько товаров в корзину пользователя. Если
        корзины нет — создаётся новая.
      summary: Добавить товар(ы) в корзину
      tags:
      - Корзина
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      product_info:
                        type: integer
                        example: 1
                      quantity:
                        type: integer
                        example: 2
                    required:
                    - product_info
                    - quantity
              required:
              - items
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Товар(ы) успешно добавлены
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Ошибка валидации или неверный формат данных
          description: ''
    put:
      operationId: api_v1_basket_update
      description: Изменяет количество определённых товаров в корзине. Ожидает список
        объектов с полями `id` и `quantity`.
      summary: Обновить количество товаров в корзине
      tags:
      - Корзина
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      quantity:
                        type: integer
                        example: 5
                    required:
                    - id
                    - quantity
              required:
              - items
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Товар(ы) успешно обновлены
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Ошибка валидации или неверный формат данных
          description: ''
    delete:
      operationId: api_v1_basket_destroy
      description: 'Удаляет товары из корзины по их ID. ID передаются в виде строки,
        разделённой запятыми, например: `1,2,3`.'
      summary: Удалить товары из корзины
      parameters:
      - in: body
        name: items
        schema:
          type: string
        description: Список ID товаров в корзине, которые нужно удалить
      tags:
      - Корзина
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Товар(ы) успешно удалены
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Неверный формат данных или отсутствуют аргументы
          description: ''
  /api/v1/categories:
    get:
      operationId: api_v1_categories_list
      description: Возвращает список всех доступных категорий товаров.
      summary: Получить список всех категорий
      tags:
      - Категории
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: ''
  /api/v1/order:
    get:
      operationId: api_v1_order_list
      description: Возвращает список всех оформленных заказов пользователя (кроме
        корзины). Включает информацию о товарах, категориях и общей сумме заказа.
      summary: Получить список заказов пользователя
      tags:
      - Заказы
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          description: ''
    post:
      operationId: api_v1_order_create
      description: Обновляет состояние указанного заказа на 'new' и отправляет email-уведомление
        пользователю. Требует ID заказа и контактной информации.
      summary: Подтвердить заказ и отправить уведомление
      tags:
      - Заказы
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: '1'
                  description: ID заказа
                contact:
                  type: string
                  example: '2'
                  description: ID контактной информации
              required:
              - id
              - contact
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Заказ успешно подтверждён
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Ошибка валидации или отсутствуют аргументы
          description: ''
  /api/v1/partner/orders:
    get:
      operationId: api_v1_partner_orders_list
      description: Возвращает список всех заказов, в которых есть товары, принадлежащие
        магазинам текущего пользователя.Включает общую сумму заказа и детали товаров.
      summary: Получить список заказов продавца
      tags:
      - Партнер
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          description: ''
  /api/v1/partner/state:
    get:
      operationId: api_v1_partner_state_retrieve
      description: Возвращает текущее состояние (включен/выключен) магазина продавца.
      summary: Получить текущее состояние магазина
      tags:
      - Партнер
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Магазин не найден
          description: ''
    post:
      operationId: api_v1_partner_state_create
      description: Изменяет состояние магазина продавца (вкл/выкл). Статус передается
        в параметре `state` как строка 'True' или 'False'.
      summary: Обновить состояние магазина
      tags:
      - Партнер
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                  example: 'True'
                  description: Значение должно быть строкой "True" или "False"
              required:
              - state
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Статус обновлен успешно
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Ошибка валидации или недостаточно данных
          description: ''
  /api/v1/partner/update:
    post:
      operationId: api_v1_partner_update_create
      description: Принимает URL-адрес и проверяет его корректность. Если URL валиден,
        происходит попытка загрузки данных (например, файла или JSON).
      summary: Обновление прайса продавца по внешней ссылке
      tags:
      - Партнер
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  example: 'https://example.com/data.yaml '
                  description: URL, откуда будут загружаться данные
              required:
              - url
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Данные успешно загружены
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: 'Ошибка: неверный URL или недостаточно данных'
          description: ''
  /api/v1/products:
    get:
      operationId: api_v1_products_list
      description: Возвращает список товаров с фильтрацией по магазину и категории.
        Можно указать параметры запроса `shop_id` и/или `category_id`.
      summary: Получить информацию о товарах
      parameters:
      - in: query
        name: category_id
        schema:
          type: integer
        description: Фильтр по ID категории товара
      - in: query
        name: shop_id
        schema:
          type: integer
        description: Фильтр по ID магазина
      tags:
      - Информация о товарах
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInfo'
          description: ''
  /api/v1/shops:
    get:
      operationId: api_v1_shops_list
      description: Возвращает список всех магазинов, у которых состояние (state) установлено
        как 'активен'.
      summary: Получить список активных магазинов
      tags:
      - Магазины
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Shop'
          description: ''
  /api/v1/user/contact:
    get:
      operationId: api_v1_user_contact_list
      description: Возвращает все сохранённые контакты текущего авторизованного пользователя.
      summary: Получить список контактов пользователя
      tags:
      - Пользователь
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
          description: ''
    post:
      operationId: api_v1_user_contact_create
      description: 'Создаёт новый контакт для текущего пользователя. '
      summary: Добавить новый контакт
      tags:
      - Пользователь
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Contact'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Contact'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                description: Контакт успешно создан
                type: object
                properties:
                  Status:
                    type: boolean
                  id:
                    type: integer
                  city:
                    type: string
                  street:
                    type: string
                  house:
                    type: string
                  apartment:
                    type: string
                  phone:
                    type: string
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Ошибка валидации данных
                type: object
                properties:
                  Status:
                    type: boolean
                    example: 'False'
                  Errors:
                    type: object
          description: ''
    put:
      operationId: api_v1_user_contact_update
      description: 'Изменяет данные контакта по его ID. '
      summary: Обновить существующий контакт
      tags:
      - Пользователь
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Contact'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Contact'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Контакт успешно обновлён
                type: object
                properties:
                  Status:
                    type: boolean
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Ошибка валидации или отсутствие аргументов
                type: object
                properties:
                  Status:
                    type: boolean
                  Errors:
                    type: object
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Контакт не найден
                type: object
                properties:
                  Status:
                    type: boolean
                  Errors:
                    type: string
          description: ''
    delete:
      operationId: api_v1_user_contact_destroy
      description: Удаляет контакты по списку ID (передаются через запятую в параметре
        `items`).
      summary: Удалить один или несколько контактов
      tags:
      - Пользователь
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Контакты успешно удалены
                type: object
                properties:
                  Status:
                    type: boolean
                  detail:
                    type: string
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Недостаточно аргументов
                type: object
                properties:
                  Status:
                    type: boolean
                  Errors:
                    type: string
          description: ''
  /api/v1/user/detail:
    get:
      operationId: api_v1_user_detail_retrieve
      description: Возвращает данные авторизованного пользователя (имя, email, телефон
        и т.д.).
      summary: Получить данные текущего пользователя
      tags:
      - Пользователь
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: api_v1_user_detail_create
      description: Позволяет обновить данные текущего пользователя, включая пароль.
        Если передан новый пароль — он проверяется на соответствие политике безопасности.
      summary: Обновить данные текущего пользователя
      tags:
      - Пользователь
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Данные успешно обновлены
                type: object
                properties:
                  Status:
                    type: boolean
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Ошибка валидации данных или пароля
                type: object
                properties:
                  Status:
                    type: boolean
                  Errors:
                    type: string
          description: ''
  /api/v1/user/login:
    post:
      operationId: api_v1_user_login_create
      description: Выполняет вход пользователя по email и паролю. Возвращает токен
        авторизации, если данные корректны.
      summary: Авторизация пользователя
      tags:
      - Пользователь
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
                  format: password
              required:
              - email
              - password
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Успешный вход
                type: object
                properties:
                  Status:
                    type: boolean
                  Token:
                    type: string
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Ошибка авторизации
                type: object
                properties:
                  Status:
                    type: boolean
                  Errors:
                    type: string
          description: ''
  /api/v1/user/password_reset:
    post:
      operationId: api_v1_user_password_reset_create
      description: Отправляет токен для сброса пароля на указанный email. Если у пользователя
        уже есть активный токен — будет использован он. Иначе создаётся новый.
      summary: Запрос на сброс пароля
      tags:
      - Пользователь
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Email'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Email'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Токен успешно отправлен
                type: object
                properties:
                  Status:
                    type: boolean
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Ошибка запроса
                type: object
                properties:
                  Status:
                    type: boolean
                  error:
                    type: string
                  Errors:
                    type: object
          description: ''
  /api/v1/user/password_reset/confirm:
    post:
      operationId: api_v1_user_password_reset_confirm_create
      description: An Api View which provides a method to reset a password based on
        a unique token
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordToken'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordToken'
          description: ''
  /api/v1/user/register:
    post:
      operationId: api_v1_user_register_create
      description: 'Создаёт нового пользователя с обязательными полями: имя, фамилия,
        email, пароль, компания, должность. После регистрации отправляется токен подтверждения
        на email.'
      summary: Регистрация нового пользователя
      tags:
      - Пользователь
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: Иван
                last_name:
                  type: string
                  example: Иванов
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: StrongPassword123!
                  format: password
                company:
                  type: string
                  example: ООО Компания
                position:
                  type: string
                  example: Менеджер
              required:
              - first_name
              - last_name
              - email
              - password
              - company
              - position
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Пользователь успешно зарегистрирован
                type: object
                properties:
                  Status:
                    type: boolean
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Ошибка валидации или недостающие данные
                type: object
                properties:
                  Status:
                    type: boolean
                  Errors:
                    type: object
          description: ''
  /api/v1/user/register/confirm:
    post:
      operationId: api_v1_user_register_confirm_create
      description: Подтверждает email пользователя с помощью одноразового токена.
        Если токен и email совпадают и не истек — аккаунт активируется.
      summary: Подтверждение email по токену
      tags:
      - Пользователь
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                token:
                  type: string
                  example: abc123xyz789
              required:
              - email
              - token
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Email успешно подтверждён
                type: object
                properties:
                  Status:
                    type: boolean
                  message:
                    type: string
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Ошибка подтверждения
                type: object
                properties:
                  Status:
                    type: boolean
                  error:
                    type: string
          description: ''
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Название
          maxLength: 60
      required:
      - id
      - name
    Contact:
      type: object
      description: Serializer для контакта.
      properties:
        id:
          type: integer
          readOnly: true
        city:
          type: string
          title: Город
          maxLength: 50
        street:
          type: string
          title: Улица
          maxLength: 50
        house:
          type: string
          title: Дом
          maxLength: 50
        structure:
          type: string
          title: Корпус
          maxLength: 50
        building:
          type: string
          title: Строение
          maxLength: 50
        apartment:
          type: string
          title: Квартира
          maxLength: 50
        user:
          type: integer
          writeOnly: true
          title: Пользователь
        phone:
          type: string
          title: Телефон
          maxLength: 20
      required:
      - city
      - id
      - phone
      - street
      - user
    Email:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        order_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderedItemsFull'
        total_sum:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        created_at:
          type: string
          format: date-time
          readOnly: true
        state:
          allOf:
          - $ref: '#/components/schemas/StateEnum'
          title: Статус
        contact:
          type: integer
          nullable: true
          title: Контакты получателя
      required:
      - created_at
      - id
      - order_items
      - state
      - total_sum
    OrderedItemsFull:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product_info:
          $ref: '#/components/schemas/ProductInfo'
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Количество
        order:
          type: integer
          title: Заказ
      required:
      - id
      - product_info
      - quantity
    PasswordToken:
      type: object
      properties:
        password:
          type: string
        token:
          type: string
      required:
      - password
      - token
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Название
          maxLength: 60
        category:
          type: string
          readOnly: true
      required:
      - category
      - id
      - name
    ProductInfo:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/Product'
          readOnly: true
        model:
          type: string
          title: Модель
          maxLength: 80
        shop:
          type: integer
          title: Магазин
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Количество
        price:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Цена
        price_rrc:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Розничная цена
        product_parameter:
          type: array
          items:
            $ref: '#/components/schemas/ProductParameter'
          readOnly: true
      required:
      - id
      - price
      - price_rrc
      - product
      - product_parameter
      - quantity
      - shop
    ProductParameter:
      type: object
      properties:
        parameter:
          type: string
          readOnly: true
        value:
          type: string
          title: Значение
          maxLength: 60
      required:
      - parameter
      - value
    Shop:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Название
          maxLength: 60
        state:
          type: boolean
          title: Активен
      required:
      - id
      - name
    StateEnum:
      enum:
      - basket
      - new
      - confirmed
      - assembled
      - sent
      - delivered
      - canceled
      type: string
      description: |-
        * `basket` - Статус корзины
        * `new` - Новый
        * `confirmed` - Подтвержден
        * `assembled` - Собран
        * `sent` - Отправлен
        * `delivered` - Доставлен
        * `canceled` - Отменен
    TypeEnum:
      enum:
      - shop
      - buyer
      type: string
      description: |-
        * `shop` - Магазин
        * `buyer` - Покупатель
    User:
      type: object
      description: Serializer для пользователя.
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        type:
          $ref: '#/components/schemas/TypeEnum'
        company:
          type: string
          title: Компания
          maxLength: 40
        position:
          type: string
          title: Должность
          maxLength: 40
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
          readOnly: true
      required:
      - contacts
      - email
      - id
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
